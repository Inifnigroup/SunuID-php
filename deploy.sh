#!/bin/bash

# Script de d√©ploiement automatis√© pour SunuID PHP SDK
set -e

echo "üöÄ D√©ploiement du SDK SunuID PHP"
echo "================================"

# Configuration
VERSION=$(grep '"version"' composer.json | cut -d'"' -f4)
REPO_URL="https://github.com/sunuid/php-sdk.git"
PACKAGE_NAME="sunuid-php-sdk-${VERSION}"

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages
print_status() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# V√©rification des pr√©requis
echo "üîç V√©rification des pr√©requis..."

if ! command -v git &> /dev/null; then
    print_error "Git n'est pas install√©"
    exit 1
fi

if ! command -v composer &> /dev/null; then
    print_error "Composer n'est pas install√©"
    exit 1
fi

if ! command -v php &> /dev/null; then
    print_error "PHP n'est pas install√©"
    exit 1
fi

print_status "Pr√©requis v√©rifi√©s"

# Nettoyage
echo "üßπ Nettoyage..."
rm -rf vendor/
rm -f composer.lock
rm -rf tests/results/
rm -f *.log
rm -f sunuid-php-sdk-*.zip

print_status "Nettoyage termin√©"

# Installation des d√©pendances
echo "üì¶ Installation des d√©pendances..."
composer install --no-dev --optimize-autoloader

print_status "D√©pendances install√©es"

# Tests
echo "üß™ Lancement des tests..."
if composer test > /dev/null 2>&1; then
    print_status "Tests passants"
else
    print_warning "Certains tests ont √©chou√©, mais le d√©ploiement continue..."
fi

# Validation du code
echo "üîç Validation du code..."
if composer stan > /dev/null 2>&1; then
    print_status "PHPStan OK"
else
    print_warning "PHPStan a d√©tect√© des probl√®mes"
fi

if composer cs > /dev/null 2>&1; then
    print_status "CodeSniffer OK"
else
    print_warning "CodeSniffer a d√©tect√© des probl√®mes"
fi

# V√©rification Git
echo "üìã V√©rification Git..."
if [ ! -d ".git" ]; then
    print_error "Ce n'est pas un repository Git"
    exit 1
fi

# V√©rifier s'il y a des changements non commit√©s
if [ -n "$(git status --porcelain)" ]; then
    print_warning "Il y a des changements non commit√©s"
    read -p "Voulez-vous continuer ? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        print_error "D√©ploiement annul√©"
        exit 1
    fi
fi

# Cr√©ation du package
echo "üì¶ Cr√©ation du package..."
zip -r "${PACKAGE_NAME}.zip" . \
    -x "vendor/*" \
    -x "tests/*" \
    -x "examples/*" \
    -x "*.log" \
    -x ".git/*" \
    -x ".gitignore" \
    -x "build.sh" \
    -x "deploy.sh" \
    -x "phpunit.xml" \
    -x "composer.lock" \
    -x "test_installation.php" \
    -x "*.zip" > /dev/null

print_status "Package cr√©√©: ${PACKAGE_NAME}.zip"

# V√©rification du repository distant
echo "üåê V√©rification du repository distant..."
if git remote get-url origin > /dev/null 2>&1; then
    REMOTE_URL=$(git remote get-url origin)
    print_status "Repository distant: $REMOTE_URL"
else
    print_warning "Aucun repository distant configur√©"
    read -p "Voulez-vous ajouter un repository distant ? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        read -p "URL du repository: " REPO_URL
        git remote add origin "$REPO_URL"
        print_status "Repository distant ajout√©"
    fi
fi

# Commit et push (si demand√©)
echo "üì§ Push vers GitHub..."
read -p "Voulez-vous pousser vers GitHub ? (y/N): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    # Ajouter tous les fichiers
    git add .
    
    # Commit
    git commit -m "Release v${VERSION} - SDK SunuID PHP" || true
    
    # Push
    if git push origin main; then
        print_status "Code pouss√© vers GitHub"
        
        # Cr√©er et pousser le tag
        if git tag -a "v${VERSION}" -m "Version ${VERSION}"; then
            git push origin "v${VERSION}"
            print_status "Tag v${VERSION} cr√©√© et pouss√©"
        else
            print_warning "Impossible de cr√©er le tag"
        fi
    else
        print_error "Erreur lors du push"
    fi
fi

# Instructions pour Packagist
echo ""
echo "üìã Instructions pour Packagist:"
echo "================================"
echo "1. Allez sur https://packagist.org"
echo "2. Connectez-vous ou cr√©ez un compte"
echo "3. Cliquez sur 'Submit Package'"
echo "4. Entrez l'URL: $REPO_URL"
echo "5. V√©rifiez les informations et soumettez"
echo ""

# R√©sum√©
echo "üéâ R√âSUM√â DU D√âPLOIEMENT"
echo "========================"
echo "Version: $VERSION"
echo "Package: $PACKAGE_NAME.zip"
echo "Taille: $(du -h "$PACKAGE_NAME.zip" | cut -f1)"
echo ""
echo "üìÅ Fichiers cr√©√©s:"
echo "- $PACKAGE_NAME.zip (package de distribution)"
echo "- Documentation mise √† jour"
echo ""
echo "üìû Support: dev@sunuid.sn"
echo "üìñ Documentation: https://docs.sunuid.sn"
echo ""
print_status "D√©ploiement termin√© avec succ√®s!" 